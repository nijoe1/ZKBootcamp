/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ZKTreeVote,
  ZKTreeVoteInterface,
} from "../../../contracts/ZKVote/ZKTreeVote";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_levels",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "_hasher",
        type: "address",
      },
      {
        internalType: "address",
        name: "_verifier",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "_validators",
        type: "address[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "commitment",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "leafIndex",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "Commit",
    type: "event",
  },
  {
    inputs: [],
    name: "FIELD_SIZE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ROOT_HISTORY_SIZE",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ZERO_VALUE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "commitments",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "currentRootIndex",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "filledSubtrees",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_option",
        type: "address",
      },
    ],
    name: "getRecipientVotes",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_left",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_right",
        type: "uint256",
      },
    ],
    name: "hashLeftRight",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "hasher",
    outputs: [
      {
        internalType: "contract IHasher",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_root",
        type: "bytes32",
      },
    ],
    name: "isKnownRoot",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_validator",
        type: "address",
      },
    ],
    name: "isValidator",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "levels",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nextIndex",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "nullifiers",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_uniqueHash",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_commitment",
        type: "uint256",
      },
    ],
    name: "registerCommitment",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_validator",
        type: "address",
      },
    ],
    name: "registerValidator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "roots",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "validators",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "verifier",
    outputs: [
      {
        internalType: "contract IVerifier",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_option",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_nullifier",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_root",
        type: "uint256",
      },
      {
        internalType: "uint256[2]",
        name: "_proof_a",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[2][2]",
        name: "_proof_b",
        type: "uint256[2][2]",
      },
      {
        internalType: "uint256[2]",
        name: "_proof_c",
        type: "uint256[2]",
      },
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "i",
        type: "uint256",
      },
    ],
    name: "zeros",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c0604052600380546001600160401b03191690553480156200002157600080fd5b50604051620022c1380380620022c18339810160408190526200004491620008e5565b838383828260008263ffffffff1611620000b15760405162461bcd60e51b815260206004820152602360248201527f5f6c6576656c732073686f756c642062652067726561746572207468616e207a60448201526265726f60e81b60648201526084015b60405180910390fd5b60208263ffffffff1610620001095760405162461bcd60e51b815260206004820152601e60248201527f5f6c6576656c732073686f756c64206265206c657373207468616e20333200006044820152606401620000a8565b6000805463ffffffff191663ffffffff84161781556001600160a01b0382166080525b8263ffffffff168163ffffffff1610156200017d576200015263ffffffff821662000269565b63ffffffff821660009081526001602052604090205580620001748162000a10565b9150506200012c565b506200019b6200018f60018462000a36565b63ffffffff1662000269565b600080805260026020527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b919091556001600160a01b0390931660a0525090925050505b81518110156200024b5760016007600084848151811062000204576200020462000a5d565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580620002428162000a73565b915050620001df565b5050600680546001600160a01b031916331790555062000a8f915050565b6000816000036200029b57507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b81600103620002cb57507f256a6135777eee2fd26f54b8b7037a25439d5235caee224154186d2b8a52e31d919050565b81600203620002fb57507f1151949895e82ab19924de92c40a3d6f7bcb60d92b00504b8199613683f0c200919050565b816003036200032b57507f20121ee811489ff8d61f09fb89e313f14959a0f28bb428a20dba6b0b068b3bdb919050565b816004036200035b57507f0a89ca6ffa14cc462cfedb842c30ed221a50a3d6bf022a6a57dc82ab24c157c9919050565b816005036200038b57507f24ca05c2b5cd42e890d6be94c68d0689f4f21c9cec9c0f13fe41d566dfb54959919050565b81600603620003bb57507f1ccb97c932565a92c60156bdba2d08f3bf1377464e025cee765679e604a7315c919050565b81600703620003eb57507f19156fbd7d1a8bf5cba8909367de1b624534ebab4f0f79e003bccdd1b182bdb4919050565b816008036200041b57507f261af8c1f0912e465744641409f622d466c3920ac6e5ff37e36604cb11dfff80919050565b816009036200044a57507e58459724ff6ca5a1652fcbc3e82b93895cf08e975b19beab3f54c217d1c007919050565b81600a036200047a57507f1f04ef20dee48d39984d8eabe768a70eafa6310ad20849d4573c3c40c2ad1e30919050565b81600b03620004aa57507f1bea3dec5dab51567ce7e200a30f7ba6d4276aeaa53e2686f962a46c66d511e5919050565b81600c03620004da57507f0ee0f941e2da4b9e31c3ca97a40d8fa9ce68d97c084177071b3cb46cd3372f0f919050565b81600d036200050a57507f1ca9503e8935884501bbaf20be14eb4c46b89772c97b96e3b2ebf3a36a948bbd919050565b81600e036200053a57507f133a80e30697cd55d8f7d4b0965b7be24057ba5dc3da898ee2187232446cb108919050565b81600f036200056a57507f13e6d8fc88839ed76e182c2a779af5b2c0da9dd18c90427a644f7e148a6253b6919050565b816010036200059a57507f1eb16b057a477f4bc8f572ea6bee39561098f78f15bfb3699dcbb7bd8db61854919050565b81601103620005ca57507f0da2cb16a1ceaabf1c16b838f7a9e3f2a3a3088d9e0a6debaa748114620696ea919050565b81601203620005fa57507f24a3b3d822420b14b5d8cb6c28a574f01e98ea9e940551d2ebd75cee12649f9d919050565b816013036200062a57507f198622acbd783d1b0d9064105b1fc8e4d8889de95c4c519b3f635809fe6afc05919050565b816014036200065a57507f29d7ed391256ccc3ea596c86e933b89ff339d25ea8ddced975ae2fe30b5296d4919050565b816015036200068a57507f19be59f2f0413ce78c0c3703a3a5451b1d7f39629fa33abd11548a76065b2967919050565b81601603620006ba57507f1ff3f61797e538b70e619310d33f2a063e7eb59104e112e95738da1254dc3453919050565b81601703620006ea57507f10c16ae9959cf8358980d9dd9616e48228737310a10e2b6b731c1a548f036c48919050565b816018036200071a57507f0ba433a63174a90ac20992e75e3095496812b652685b5e1a2eae0b1bf4e8fcd1919050565b816019036200074a57507f019ddb9df2bc98d987d0dfeca9d2b643deafab8f7036562e627c3667266a044c919050565b81601a036200077a57507f2d3c88b23175c5a5565db928414c66d1912b11acf974b2e644caaac04739ce99919050565b81601b03620007aa57507f2eab55f6ae4e66e32c5189eed5c470840863445760f5ed7e7b69b2a62600f354919050565b81601c03620007d957507e2df37a2642621802383cf952bf4dd1f32e05433beeb1fd41031fb7eace979d919050565b81601d036200080957507f104aeb41435db66c3e62feccc1d6f5d98d0a0ed75d1374db457cf462e3a1f427919050565b81601e036200083957507f1f3c6fd858e9a7d4b0d1f38e256a09d81d5a5e3c963987e2d4b814cfab7c6ebb919050565b81601f036200086957507f2c7a07d20dff79d01fecedc1134284a8d08436606c93693b67e333f671bf69cc919050565b60405162461bcd60e51b815260206004820152601360248201527f496e646578206f7574206f6620626f756e6473000000000000000000000000006044820152606401620000a8565b919050565b80516001600160a01b0381168114620008b257600080fd5b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215620008fc57600080fd5b845163ffffffff811681146200091157600080fd5b9350602062000922868201620008b7565b93506200093260408701620008b7565b60608701519093506001600160401b03808211156200095057600080fd5b818801915088601f8301126200096557600080fd5b8151818111156200097a576200097a620008cf565b8060051b604051601f19603f83011681018181108582111715620009a257620009a2620008cf565b60405291825284820192508381018501918b831115620009c157600080fd5b938501935b82851015620009ea57620009da85620008b7565b84529385019392850192620009c6565b989b979a50959850505050505050565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff80831681810362000a2c5762000a2c620009fa565b6001019392505050565b63ffffffff82811682821603908082111562000a565762000a56620009fa565b5092915050565b634e487b7160e01b600052603260045260246000fd5b60006001820162000a885762000a88620009fa565b5060010190565b60805160a0516117f762000aca600039600081816101db015261103a015260008181610384015281816106bc015261076c01526117f76000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c806390eeb02b116100c3578063ec7329591161007c578063ec73295914610358578063ed33639f1461037f578063f178e47c146103a6578063fa52c7d8146103c6578063facd743b146103e9578063fc7e9c6f1461041557600080fd5b806390eeb02b146102be5780639fca5169146102ce578063ba70f75714610300578063c2b40ae41461031d578063cd87a3b41461033d578063e82955881461034557600080fd5b80634e3dcdd5116101155780634e3dcdd51461022a5780634ecf518b1461023d5780635bb93995146102625780636d9833e314610275578063839df945146102885780638da5cb5b146102ab57600080fd5b80631407beb81461015257806321a8a764146101675780632997e86b146101a35780632b7ac3f3146101d6578063414a37ba14610215575b600080fd5b6101656101603660046112e1565b61042d565b005b61019061017536600461131a565b6001600160a01b031660009081526009602052604090205490565b6040519081526020015b60405180910390f35b6101c66101b136600461133c565b60046020526000908152604090205460ff1681565b604051901515815260200161019a565b6101fd7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161019a565b6101906000805160206117a283398151915281565b6101656102383660046113dc565b61051f565b60005461024d9063ffffffff1681565b60405163ffffffff909116815260200161019a565b6101906102703660046112e1565b6105ce565b6101c661028336600461133c565b6107ea565b6101c661029636600461133c565b60056020526000908152604090205460ff1681565b6006546101fd906001600160a01b031681565b60035461024d9063ffffffff1681565b6101656102dc36600461131a565b6001600160a01b03166000908152600760205260409020805460ff19166001179055565b60035463ffffffff16600090815260026020526040902054610190565b61019061032b36600461133c565b60026020526000908152604090205481565b61024d601e81565b61019061035336600461133c565b610868565b6101907f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c81565b6101fd7f000000000000000000000000000000000000000000000000000000000000000081565b6101906103b436600461133c565b60016020526000908152604090205481565b6101c66103d436600461131a565b60076020526000908152604090205460ff1681565b6101c66103f736600461131a565b6001600160a01b031660009081526007602052604090205460ff1690565b60035461024d90640100000000900463ffffffff1681565b3360009081526007602052604090205460ff166104915760405162461bcd60e51b815260206004820152601a60248201527f4f6e6c792076616c696461746f722063616e20636f6d6d69742100000000000060448201526064015b60405180910390fd5b60008281526008602052604090205460ff16156104fa5760405162461bcd60e51b815260206004820152602160248201527f5468697320756e69717565206861736820697320616c726561647920757365646044820152602160f81b6064820152608401610488565b61050381610e8b565b506000908152600860205260409020805460ff19166001179055565b6006546001600160a01b031633146105795760405162461bcd60e51b815260206004820152601e60248201527f4f6e6c7920706172656e7420636f6e74726163742063616e2063616c6c2100006044820152606401610488565b6105868585858585610f5d565b6001600160a01b0386166000908152600960205260409020546105aa9060016114a3565b6001600160a01b039096166000908152600960205260409020959095555050505050565b60006000805160206117a2833981519152831061062d5760405162461bcd60e51b815260206004820181905260248201527f5f6c6566742073686f756c6420626520696e7369646520746865206669656c646044820152606401610488565b6000805160206117a283398151915282106106945760405162461bcd60e51b815260206004820152602160248201527f5f72696768742073686f756c6420626520696e7369646520746865206669656c6044820152601960fa1b6064820152608401610488565b604051633f1a118760e01b8152600481018490526000602482018190526044820181905284917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690633f1a1187906064016040805180830381865afa15801561070a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072e91906114b6565b90925090506000805160206117a2833981519152848308604051633f1a118760e01b81526004810182905260248101839052600060448201529092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690633f1a1187906064016040805180830381865afa1580156107ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107de91906114b6565b50925050505b92915050565b60008181036107fb57506000919050565b60035463ffffffff16805b63ffffffff8116600090815260026020526040902054840361082c575060019392505050565b8063ffffffff1660000361083e5750601e5b80610848816114f0565b9150508163ffffffff168163ffffffff1603610806575060009392505050565b60008160000361089957507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b816001036108c857507f256a6135777eee2fd26f54b8b7037a25439d5235caee224154186d2b8a52e31d919050565b816002036108f757507f1151949895e82ab19924de92c40a3d6f7bcb60d92b00504b8199613683f0c200919050565b8160030361092657507f20121ee811489ff8d61f09fb89e313f14959a0f28bb428a20dba6b0b068b3bdb919050565b8160040361095557507f0a89ca6ffa14cc462cfedb842c30ed221a50a3d6bf022a6a57dc82ab24c157c9919050565b8160050361098457507f24ca05c2b5cd42e890d6be94c68d0689f4f21c9cec9c0f13fe41d566dfb54959919050565b816006036109b357507f1ccb97c932565a92c60156bdba2d08f3bf1377464e025cee765679e604a7315c919050565b816007036109e257507f19156fbd7d1a8bf5cba8909367de1b624534ebab4f0f79e003bccdd1b182bdb4919050565b81600803610a1157507f261af8c1f0912e465744641409f622d466c3920ac6e5ff37e36604cb11dfff80919050565b81600903610a3f57507e58459724ff6ca5a1652fcbc3e82b93895cf08e975b19beab3f54c217d1c007919050565b81600a03610a6e57507f1f04ef20dee48d39984d8eabe768a70eafa6310ad20849d4573c3c40c2ad1e30919050565b81600b03610a9d57507f1bea3dec5dab51567ce7e200a30f7ba6d4276aeaa53e2686f962a46c66d511e5919050565b81600c03610acc57507f0ee0f941e2da4b9e31c3ca97a40d8fa9ce68d97c084177071b3cb46cd3372f0f919050565b81600d03610afb57507f1ca9503e8935884501bbaf20be14eb4c46b89772c97b96e3b2ebf3a36a948bbd919050565b81600e03610b2a57507f133a80e30697cd55d8f7d4b0965b7be24057ba5dc3da898ee2187232446cb108919050565b81600f03610b5957507f13e6d8fc88839ed76e182c2a779af5b2c0da9dd18c90427a644f7e148a6253b6919050565b81601003610b8857507f1eb16b057a477f4bc8f572ea6bee39561098f78f15bfb3699dcbb7bd8db61854919050565b81601103610bb757507f0da2cb16a1ceaabf1c16b838f7a9e3f2a3a3088d9e0a6debaa748114620696ea919050565b81601203610be657507f24a3b3d822420b14b5d8cb6c28a574f01e98ea9e940551d2ebd75cee12649f9d919050565b81601303610c1557507f198622acbd783d1b0d9064105b1fc8e4d8889de95c4c519b3f635809fe6afc05919050565b81601403610c4457507f29d7ed391256ccc3ea596c86e933b89ff339d25ea8ddced975ae2fe30b5296d4919050565b81601503610c7357507f19be59f2f0413ce78c0c3703a3a5451b1d7f39629fa33abd11548a76065b2967919050565b81601603610ca257507f1ff3f61797e538b70e619310d33f2a063e7eb59104e112e95738da1254dc3453919050565b81601703610cd157507f10c16ae9959cf8358980d9dd9616e48228737310a10e2b6b731c1a548f036c48919050565b81601803610d0057507f0ba433a63174a90ac20992e75e3095496812b652685b5e1a2eae0b1bf4e8fcd1919050565b81601903610d2f57507f019ddb9df2bc98d987d0dfeca9d2b643deafab8f7036562e627c3667266a044c919050565b81601a03610d5e57507f2d3c88b23175c5a5565db928414c66d1912b11acf974b2e644caaac04739ce99919050565b81601b03610d8d57507f2eab55f6ae4e66e32c5189eed5c470840863445760f5ed7e7b69b2a62600f354919050565b81601c03610dbb57507e2df37a2642621802383cf952bf4dd1f32e05433beeb1fd41031fb7eace979d919050565b81601d03610dea57507f104aeb41435db66c3e62feccc1d6f5d98d0a0ed75d1374db457cf462e3a1f427919050565b81601e03610e1957507f1f3c6fd858e9a7d4b0d1f38e256a09d81d5a5e3c963987e2d4b814cfab7c6ebb919050565b81601f03610e4857507f2c7a07d20dff79d01fecedc1134284a8d08436606c93693b67e333f671bf69cc919050565b60405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b6044820152606401610488565b919050565b60008181526005602052604090205460ff1615610ef45760405162461bcd60e51b815260206004820152602160248201527f54686520636f6d6d69746d656e7420686173206265656e207375626d697474656044820152601960fa1b6064820152608401610488565b6000818152600560205260408120805460ff19166001179055610f168261110f565b6040805163ffffffff8316815242602082015291925083917f401999886e5f90a91b92a0bfb7e2d48f714651a4d1c929bb3a753525ba066b91910160405180910390a25050565b60008581526004602052604090205460ff1615610fbc5760405162461bcd60e51b815260206004820181905260248201527f546865206e756c6c696669657220686173206265656e207375626d69747465646044820152606401610488565b610fc5846107ea565b6110115760405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f742066696e6420796f7572206d65726b6c6520726f6f74000000006044820152606401610488565b604080518082018252868152602081018690529051637ae4eb4f60e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163f5c9d69e9161107391879187918791600401611539565b602060405180830381865afa158015611090573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b491906115c4565b6110f05760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210383937b7b360991b6044820152606401610488565b505050600091825250600460205260409020805460ff19166001179055565b60035460008054909163ffffffff640100000000909104811691611135911660026116f7565b63ffffffff168163ffffffff16036111a85760405162461bcd60e51b815260206004820152603060248201527f4d65726b6c6520747265652069732066756c6c2e204e6f206d6f7265206c656160448201526f1d995cc818d85b88189948185919195960821b6064820152608401610488565b8083600080805b60005463ffffffff9081169082161015611253576111ce600286611714565b63ffffffff1660000361120c578392506111ed8163ffffffff16610868565b63ffffffff821660009081526001602052604090208590559150611228565b63ffffffff811660009081526001602052604090205492508391505b61123283836105ce565b935061123f600286611737565b94508061124b8161175a565b9150506111af565b50600354600090601e9061126e9063ffffffff16600161177d565b6112789190611714565b6003805463ffffffff191663ffffffff8316908117909155600090815260026020526040902085905590506112ae86600161177d565b6003805463ffffffff929092166401000000000267ffffffff000000001990921691909117905550939695505050505050565b600080604083850312156112f457600080fd5b50508035926020909101359150565b80356001600160a01b0381168114610e8657600080fd5b60006020828403121561132c57600080fd5b61133582611303565b9392505050565b60006020828403121561134e57600080fd5b5035919050565b6040805190810167ffffffffffffffff8111828210171561138657634e487b7160e01b600052604160045260246000fd5b60405290565b600082601f83011261139d57600080fd5b6113a5611355565b8060408401858111156113b757600080fd5b845b818110156113d15780358452602093840193016113b9565b509095945050505050565b60008060008060008061016087890312156113f657600080fd5b6113ff87611303565b95506020808801359550604080890135955061141e8a60608b0161138c565b94508960bf8a011261142f57600080fd5b611437611355565b806101208b018c81111561144a57600080fd5b60a08c015b8181101561146e576114618e8261138c565b845292850192840161144f565b5081965061147c8d8261138c565b955050505050509295509295509295565b634e487b7160e01b600052601160045260246000fd5b808201808211156107e4576107e461148d565b600080604083850312156114c957600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601260045260246000fd5b600063ffffffff8216806115065761150661148d565b6000190192915050565b8060005b6002811015611533578151845260209384019390910190600101611514565b50505050565b61014081016115488287611510565b6040808301866000805b6002808210611561575061159b565b835185845b83811015611584578251825260209283019290910190600101611566565b505050938501935060209290920191600101611552565b50505050506115ad60c0830185611510565b6115bb610100830184611510565b95945050505050565b6000602082840312156115d657600080fd5b8151801515811461133557600080fd5b600181815b80851115611623578163ffffffff048211156116095761160961148d565b8085161561161657918102915b93841c93908002906115eb565b509250929050565b60008261163a575060016107e4565b81611647575060006107e4565b816001811461165d576002811461166757611698565b60019150506107e4565b60ff8411156116785761167861148d565b6001841b915063ffffffff8211156116925761169261148d565b506107e4565b5060208310610133831016604e8410600b84101617156116cf575081810a63ffffffff8111156116ca576116ca61148d565b6107e4565b6116d983836115e6565b8063ffffffff048211156116ef576116ef61148d565b029392505050565b600063ffffffff61170c81851682851661162b565b949350505050565b600063ffffffff8084168061172b5761172b6114da565b92169190910692915050565b600063ffffffff8084168061174e5761174e6114da565b92169190910492915050565b600063ffffffff8083168181036117735761177361148d565b6001019392505050565b63ffffffff81811683821601908082111561179a5761179a61148d565b509291505056fe30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001a2646970667358221220678ceb39d9a3febad04828e9cc8390b012a85488635ff6d0e855bf541f2e5af064736f6c63430008140033";

type ZKTreeVoteConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ZKTreeVoteConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ZKTreeVote__factory extends ContractFactory {
  constructor(...args: ZKTreeVoteConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _levels: PromiseOrValue<BigNumberish>,
    _hasher: PromiseOrValue<string>,
    _verifier: PromiseOrValue<string>,
    _validators: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ZKTreeVote> {
    return super.deploy(
      _levels,
      _hasher,
      _verifier,
      _validators,
      overrides || {}
    ) as Promise<ZKTreeVote>;
  }
  override getDeployTransaction(
    _levels: PromiseOrValue<BigNumberish>,
    _hasher: PromiseOrValue<string>,
    _verifier: PromiseOrValue<string>,
    _validators: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _levels,
      _hasher,
      _verifier,
      _validators,
      overrides || {}
    );
  }
  override attach(address: string): ZKTreeVote {
    return super.attach(address) as ZKTreeVote;
  }
  override connect(signer: Signer): ZKTreeVote__factory {
    return super.connect(signer) as ZKTreeVote__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ZKTreeVoteInterface {
    return new utils.Interface(_abi) as ZKTreeVoteInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ZKTreeVote {
    return new Contract(address, _abi, signerOrProvider) as ZKTreeVote;
  }
}
