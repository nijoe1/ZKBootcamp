/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ZKTreeVote,
  ZKTreeVoteInterface,
} from "../../../contracts/ZKVote/ZKTreeVote";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_levels",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "_hasher",
        type: "address",
      },
      {
        internalType: "address",
        name: "_verifier",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "_validators",
        type: "address[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "commitment",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "leafIndex",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "Commit",
    type: "event",
  },
  {
    inputs: [],
    name: "FIELD_SIZE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ROOT_HISTORY_SIZE",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ZERO_VALUE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "commitments",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "currentRootIndex",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "filledSubtrees",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_option",
        type: "address",
      },
    ],
    name: "getRecipientVotes",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_left",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_right",
        type: "uint256",
      },
    ],
    name: "hashLeftRight",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "hasher",
    outputs: [
      {
        internalType: "contract IHasher",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_root",
        type: "bytes32",
      },
    ],
    name: "isKnownRoot",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_validator",
        type: "address",
      },
    ],
    name: "isValidator",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "levels",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nextIndex",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "nullifiers",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_uniqueHash",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_commitment",
        type: "uint256",
      },
    ],
    name: "registerCommitment",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_validator",
        type: "address",
      },
    ],
    name: "registerValidator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "roots",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "validators",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "verifier",
    outputs: [
      {
        internalType: "contract IVerifier",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_option",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_nullifier",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_root",
        type: "uint256",
      },
      {
        internalType: "uint256[2]",
        name: "_proof_a",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[2][2]",
        name: "_proof_b",
        type: "uint256[2][2]",
      },
      {
        internalType: "uint256[2]",
        name: "_proof_c",
        type: "uint256[2]",
      },
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "i",
        type: "uint256",
      },
    ],
    name: "zeros",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x604060c0815234620002c75762001e21803803806200001e81620002e2565b928339810190608081830312620002c757805163ffffffff93848216809203620002c75760206200005181850162000308565b946200005f83860162000308565b60608601516001600160401b0396919591878211620002c757019180601f84011215620002c7578251968711620002cc5760059287841b908580620000a6818501620002e2565b809b81520192820101928311620002c75785809101915b838310620002ac575050600380546001600160401b0319169055505080156200025c578281101562000218576000805463ffffffff1916821781556001600160a01b0397881660805296875b8981168381101562000154579081620001238c936200031d565b908b5260018752878b205516898114620001405760010162000109565b634e487b7160e01b89526011600452602489fd5b505091969590948860001980970181811162000140578492916200017991166200031d565b88805260028652868920551660a052855b8151811015620001d75780881b82018401518316875260078452848720805460ff19166001179055858114620001c3576001016200018a565b634e487b7160e01b87526011600452602487fd5b600680546001600160a01b03191633179055845161150590816200091c82396080518181816101c80152610c5d015260a05181818161058601526107ee0152f35b835162461bcd60e51b815260048101849052601e60248201527f5f6c6576656c732073686f756c64206265206c657373207468616e20333200006044820152606490fd5b835162461bcd60e51b815260048101849052602360248201527f5f6c6576656c732073686f756c642062652067726561746572207468616e207a60448201526265726f60e81b6064820152608490fd5b8190620002b98462000308565b8152019101908590620000bd565b600080fd5b634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f191682016001600160401b03811183821017620002cc57604052565b51906001600160a01b0382168203620002c757565b806200034857507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c90565b600181036200037657507f256a6135777eee2fd26f54b8b7037a25439d5235caee224154186d2b8a52e31d90565b60028103620003a457507f1151949895e82ab19924de92c40a3d6f7bcb60d92b00504b8199613683f0c20090565b60038103620003d257507f20121ee811489ff8d61f09fb89e313f14959a0f28bb428a20dba6b0b068b3bdb90565b600481036200040057507f0a89ca6ffa14cc462cfedb842c30ed221a50a3d6bf022a6a57dc82ab24c157c990565b600581036200042e57507f24ca05c2b5cd42e890d6be94c68d0689f4f21c9cec9c0f13fe41d566dfb5495990565b600681036200045c57507f1ccb97c932565a92c60156bdba2d08f3bf1377464e025cee765679e604a7315c90565b600781036200048a57507f19156fbd7d1a8bf5cba8909367de1b624534ebab4f0f79e003bccdd1b182bdb490565b60088103620004b857507f261af8c1f0912e465744641409f622d466c3920ac6e5ff37e36604cb11dfff8090565b60098103620004e557507e58459724ff6ca5a1652fcbc3e82b93895cf08e975b19beab3f54c217d1c00790565b600a81036200051357507f1f04ef20dee48d39984d8eabe768a70eafa6310ad20849d4573c3c40c2ad1e3090565b600b81036200054157507f1bea3dec5dab51567ce7e200a30f7ba6d4276aeaa53e2686f962a46c66d511e590565b600c81036200056f57507f0ee0f941e2da4b9e31c3ca97a40d8fa9ce68d97c084177071b3cb46cd3372f0f90565b600d81036200059d57507f1ca9503e8935884501bbaf20be14eb4c46b89772c97b96e3b2ebf3a36a948bbd90565b600e8103620005cb57507f133a80e30697cd55d8f7d4b0965b7be24057ba5dc3da898ee2187232446cb10890565b600f8103620005f957507f13e6d8fc88839ed76e182c2a779af5b2c0da9dd18c90427a644f7e148a6253b690565b601081036200062757507f1eb16b057a477f4bc8f572ea6bee39561098f78f15bfb3699dcbb7bd8db6185490565b601181036200065557507f0da2cb16a1ceaabf1c16b838f7a9e3f2a3a3088d9e0a6debaa748114620696ea90565b601281036200068357507f24a3b3d822420b14b5d8cb6c28a574f01e98ea9e940551d2ebd75cee12649f9d90565b60138103620006b157507f198622acbd783d1b0d9064105b1fc8e4d8889de95c4c519b3f635809fe6afc0590565b60148103620006df57507f29d7ed391256ccc3ea596c86e933b89ff339d25ea8ddced975ae2fe30b5296d490565b601581036200070d57507f19be59f2f0413ce78c0c3703a3a5451b1d7f39629fa33abd11548a76065b296790565b601681036200073b57507f1ff3f61797e538b70e619310d33f2a063e7eb59104e112e95738da1254dc345390565b601781036200076957507f10c16ae9959cf8358980d9dd9616e48228737310a10e2b6b731c1a548f036c4890565b601881036200079757507f0ba433a63174a90ac20992e75e3095496812b652685b5e1a2eae0b1bf4e8fcd190565b60198103620007c557507f019ddb9df2bc98d987d0dfeca9d2b643deafab8f7036562e627c3667266a044c90565b601a8103620007f357507f2d3c88b23175c5a5565db928414c66d1912b11acf974b2e644caaac04739ce9990565b601b81036200082157507f2eab55f6ae4e66e32c5189eed5c470840863445760f5ed7e7b69b2a62600f35490565b601c81036200084e57507e2df37a2642621802383cf952bf4dd1f32e05433beeb1fd41031fb7eace979d90565b601d81036200087c57507f104aeb41435db66c3e62feccc1d6f5d98d0a0ed75d1374db457cf462e3a1f42790565b601e8103620008aa57507f1f3c6fd858e9a7d4b0d1f38e256a09d81d5a5e3c963987e2d4b814cfab7c6ebb90565b601f03620008d6577f2c7a07d20dff79d01fecedc1134284a8d08436606c93693b67e333f671bf69cc90565b60405162461bcd60e51b815260206004820152601360248201527f496e646578206f7574206f6620626f756e6473000000000000000000000000006044820152606490fdfe608060408181526004918236101561001657600080fd5b600092833560e01c9182631407beb8146108815750816321a8a764146108495781632997e86b1461081d5781632b7ac3f3146107d9578163414a37ba1461079e5781634e3dcdd5146103ec5781634ecf518b146103c95781635bb93995146103ad5781636d9833e314610384578163839df945146103575781638da5cb5b1461032e57816390eeb02b146103095781639fca5169146102ce578163ba70f757146102a0578163c2b40ae414610278578163cd87a3b41461025c578163e829558814610232578163ec732959146101f7578163ed33639f146101b3578163f178e47c1461018757508063fa52c7d81461014a578063facd743b1461014a5763fc7e9c6f1461012257600080fd5b346101465781600319360112610146576003549051602091821c63ffffffff168152f35b5080fd5b50346101465760203660031901126101465760209160ff9082906001600160a01b03610174610ba1565b1681526007855220541690519015158152f35b9050346101af5760203660031901126101af5760209282913581526001845220549051908152f35b8280fd5b505034610146578160031936011261014657517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b505034610146578160031936011261014657602090517f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c8152f35b828434610259576020366003190112610259575061025260209235610e82565b9051908152f35b80fd5b50503461014657816003193601126101465760209051601e8152f35b9050346101af5760203660031901126101af5760209282913581526002845220549051908152f35b5050346101465781600319360112610146578060209263ffffffff6003541681526002845220549051908152f35b505034610146576020366003190112610146576001600160a01b036102f1610ba1565b16825260076020528120805460ff1916600117905580f35b50503461014657816003193601126101465760209063ffffffff600354169051908152f35b50503461014657816003193601126101465760065490516001600160a01b039091168152602090f35b9050346101af5760203660031901126101af578160209360ff923581526005855220541690519015158152f35b82843461025957602036600319011261025957506103a460209235610de6565b90519015158152f35b505034610146576020906102526103c336610b86565b90610c21565b50503461014657816003193601126101465763ffffffff60209254169051908152f35b9050346101af576101603660031901126101af57610408610ba1565b9060249283359160443594366083121561079a5782519161042883610bb7565b60a49183368411610726576064905b84821061078a5750503660c312156106695784519361045585610bb7565b846101249436861161078657905b85821061072a5750503661014312156107265785519361048285610bb7565b846101649136831161072257905b82821061071257505050868a5260209783895260ff878c2054166106d2576104b78a610de6565b1561069057865199878b018b811067ffffffffffffffff82111761067e578852888b52898b01528651637ae4eb4f60e11b8152959795916104fb90858401906114a7565b8a9795604483015b6002808b101561055057898c918f8b51859091905b838210610532575050505060019201980199019896610503565b82945094809193956001935181520193019101908e93918d93610518565b5050899496506105758b61056a8e9a9860c48701906114a7565b6101048501906114a7565b6001600160a01b03928581610144817f000000000000000000000000000000000000000000000000000000000000000088165afa90811561067457899161063a575b5015610608578752858452848720600160ff198254161790551690818652600983528386205494600186018096116105f757505084526009905282205580f35b634e487b7160e01b87526011905285fd5b855162461bcd60e51b8152808801869052600d818601526c24b73b30b634b210383937b7b360991b6044820152606490fd5b90508581813d831161066d575b6106518183610be9565b810103126106695751801515810361066957896105b7565b8880fd5b503d610647565b87513d8b823e3d90fd5b634e487b7160e01b8d5260418652848dfd5b865162461bcd60e51b81528085018a9052601c818501527f43616e6e6f742066696e6420796f7572206d65726b6c6520726f6f74000000006044820152606490fd5b6064848a85818b519362461bcd60e51b85528401528201527f546865206e756c6c696669657220686173206265656e207375626d69747465646044820152fd5b8135815260209182019101610490565b8c80fd5b8980fd5b36601f8301121561078657875161074081610bb7565b8089840136811161078257918a9285949294905b80821061076c57505081529201916020019050610463565b813586526020958601958d955090910190610754565b8e80fd5b8b80fd5b8135815260209182019101610437565b8680fd5b505034610146578160031936011261014657602090517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018152f35b505034610146578160031936011261014657517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b9050346101af5760203660031901126101af57816020938260ff93358252855220541690519015158152f35b5050346101465760203660031901126101465760209181906001600160a01b03610871610ba1565b1681526009845220549051908152f35b84918434610b825761089236610b86565b93903386526020916007835260ff848820541615610b4157508086526008825260ff8387205416610af5578486526005825260ff8387205416610aa957848652600582528286209460019460ff1996868882541617905563ffffffff9081600354861c169180610904818c5416611456565b168314610a4d57908291879385928a8d80915b6109b9575b5050505091600896959493917f401999886e5f90a91b92a0bfb7e2d48f714651a4d1c929bb3a753525ba066b919360035490601e8161095c818516611492565b160616809163ffffffff1916176003558c5260028752828c205561097f81611492565b67ffffffff0000000060035491881b169067ffffffff0000000019161760035581519081524286820152a286525283209182541617905580f35b9193949092959685835416928d87861694851015610a3f57637fffffff93610a01938996938f93808d1615600014610a305783946109f687610e82565b968352522055610c21565b958c1c169116838114610a1d578995949392908b018d8c610917565b634e487b7160e01b8d526011835260248dfd5b91939092948352522054610c21565b50909796508195945061091c565b865162461bcd60e51b8152808301879052603060248201527f4d65726b6c6520747265652069732066756c6c2e204e6f206d6f7265206c656160448201526f1d995cc818d85b88189948185919195960821b6064820152608490fd5b50905162461bcd60e51b815291820152602160248201527f54686520636f6d6d69746d656e7420686173206265656e207375626d697474656044820152601960fa1b6064820152608490fd5b50905162461bcd60e51b815291820152602160248201527f5468697320756e69717565206861736820697320616c726561647920757365646044820152602160f81b6064820152608490fd5b62461bcd60e51b8152848101839052601a60248201527f4f6e6c792076616c696461746f722063616e20636f6d6d6974210000000000006044820152606490fd5b8380fd5b6040906003190112610b9c576004359060243590565b600080fd5b600435906001600160a01b0382168203610b9c57565b6040810190811067ffffffffffffffff821117610bd357604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117610bd357604052565b9190826040910312610b9c576020825192015190565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001929183821015610da25783811015610d535760018060a01b037f000000000000000000000000000000000000000000000000000000000000000016936040908151633f1a118760e01b94858252600482015260009485602483015285604483015283826064818b5afa978815610d4957869798859697938991610d27575b506064939486519889968795865208600484015260248301528760448301525afa928315610d1c5792610cf257505090565b610d119250803d10610d15575b610d098183610be9565b810190610c0b565b5090565b503d610cff565b9051903d90823e3d90fd5b60649450610d429150863d8811610d1557610d098183610be9565b9093610cc0565b84513d88823e3d90fd5b60405162461bcd60e51b815260206004820152602160248201527f5f72696768742073686f756c6420626520696e7369646520746865206669656c6044820152601960fa1b6064820152608490fd5b606460405162461bcd60e51b815260206004820152602060248201527f5f6c6566742073686f756c6420626520696e7369646520746865206669656c646044820152fd5b8015610e7c5763ffffffff8060035416918260019384805b610e0e575b505050505050600090565b15610e6d575b60009084811690818352600260205260408320548514610e6457859115610e5c575b168015610e4857600019019085610dfe565b634e487b7160e01b82526011600452602482fd5b50601e610e36565b50505050505090565b8184821603610e145780610e03565b50600090565b80610eac57507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c90565b60018103610ed957507f256a6135777eee2fd26f54b8b7037a25439d5235caee224154186d2b8a52e31d90565b60028103610f0657507f1151949895e82ab19924de92c40a3d6f7bcb60d92b00504b8199613683f0c20090565b60038103610f3357507f20121ee811489ff8d61f09fb89e313f14959a0f28bb428a20dba6b0b068b3bdb90565b60048103610f6057507f0a89ca6ffa14cc462cfedb842c30ed221a50a3d6bf022a6a57dc82ab24c157c990565b60058103610f8d57507f24ca05c2b5cd42e890d6be94c68d0689f4f21c9cec9c0f13fe41d566dfb5495990565b60068103610fba57507f1ccb97c932565a92c60156bdba2d08f3bf1377464e025cee765679e604a7315c90565b60078103610fe757507f19156fbd7d1a8bf5cba8909367de1b624534ebab4f0f79e003bccdd1b182bdb490565b6008810361101457507f261af8c1f0912e465744641409f622d466c3920ac6e5ff37e36604cb11dfff8090565b6009810361104057507e58459724ff6ca5a1652fcbc3e82b93895cf08e975b19beab3f54c217d1c00790565b600a810361106d57507f1f04ef20dee48d39984d8eabe768a70eafa6310ad20849d4573c3c40c2ad1e3090565b600b810361109a57507f1bea3dec5dab51567ce7e200a30f7ba6d4276aeaa53e2686f962a46c66d511e590565b600c81036110c757507f0ee0f941e2da4b9e31c3ca97a40d8fa9ce68d97c084177071b3cb46cd3372f0f90565b600d81036110f457507f1ca9503e8935884501bbaf20be14eb4c46b89772c97b96e3b2ebf3a36a948bbd90565b600e810361112157507f133a80e30697cd55d8f7d4b0965b7be24057ba5dc3da898ee2187232446cb10890565b600f810361114e57507f13e6d8fc88839ed76e182c2a779af5b2c0da9dd18c90427a644f7e148a6253b690565b6010810361117b57507f1eb16b057a477f4bc8f572ea6bee39561098f78f15bfb3699dcbb7bd8db6185490565b601181036111a857507f0da2cb16a1ceaabf1c16b838f7a9e3f2a3a3088d9e0a6debaa748114620696ea90565b601281036111d557507f24a3b3d822420b14b5d8cb6c28a574f01e98ea9e940551d2ebd75cee12649f9d90565b6013810361120257507f198622acbd783d1b0d9064105b1fc8e4d8889de95c4c519b3f635809fe6afc0590565b6014810361122f57507f29d7ed391256ccc3ea596c86e933b89ff339d25ea8ddced975ae2fe30b5296d490565b6015810361125c57507f19be59f2f0413ce78c0c3703a3a5451b1d7f39629fa33abd11548a76065b296790565b6016810361128957507f1ff3f61797e538b70e619310d33f2a063e7eb59104e112e95738da1254dc345390565b601781036112b657507f10c16ae9959cf8358980d9dd9616e48228737310a10e2b6b731c1a548f036c4890565b601881036112e357507f0ba433a63174a90ac20992e75e3095496812b652685b5e1a2eae0b1bf4e8fcd190565b6019810361131057507f019ddb9df2bc98d987d0dfeca9d2b643deafab8f7036562e627c3667266a044c90565b601a810361133d57507f2d3c88b23175c5a5565db928414c66d1912b11acf974b2e644caaac04739ce9990565b601b810361136a57507f2eab55f6ae4e66e32c5189eed5c470840863445760f5ed7e7b69b2a62600f35490565b601c810361139657507e2df37a2642621802383cf952bf4dd1f32e05433beeb1fd41031fb7eace979d90565b601d81036113c357507f104aeb41435db66c3e62feccc1d6f5d98d0a0ed75d1374db457cf462e3a1f42790565b601e81036113f057507f1f3c6fd858e9a7d4b0d1f38e256a09d81d5a5e3c963987e2d4b814cfab7c6ebb90565b601f0361141b577f2c7a07d20dff79d01fecedc1134284a8d08436606c93693b67e333f671bf69cc90565b60405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b6044820152606490fd5b801561148c5760ff8111611476576001901b9063ffffffff821161147657565b634e487b7160e01b600052601160045260246000fd5b50600190565b90600163ffffffff8093160191821161147657565b6000915b600283106114b857505050565b6001908251815260208091019201920191906114ab56fea2646970667358221220a92ea70d3e7b8ee680119d66aa298cd3c957d6c8d7d83f24894e7c4057986af264736f6c63430008140033";

type ZKTreeVoteConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ZKTreeVoteConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ZKTreeVote__factory extends ContractFactory {
  constructor(...args: ZKTreeVoteConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _levels: PromiseOrValue<BigNumberish>,
    _hasher: PromiseOrValue<string>,
    _verifier: PromiseOrValue<string>,
    _validators: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ZKTreeVote> {
    return super.deploy(
      _levels,
      _hasher,
      _verifier,
      _validators,
      overrides || {}
    ) as Promise<ZKTreeVote>;
  }
  override getDeployTransaction(
    _levels: PromiseOrValue<BigNumberish>,
    _hasher: PromiseOrValue<string>,
    _verifier: PromiseOrValue<string>,
    _validators: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _levels,
      _hasher,
      _verifier,
      _validators,
      overrides || {}
    );
  }
  override attach(address: string): ZKTreeVote {
    return super.attach(address) as ZKTreeVote;
  }
  override connect(signer: Signer): ZKTreeVote__factory {
    return super.connect(signer) as ZKTreeVote__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ZKTreeVoteInterface {
    return new utils.Interface(_abi) as ZKTreeVoteInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ZKTreeVote {
    return new Contract(address, _abi, signerOrProvider) as ZKTreeVote;
  }
}
