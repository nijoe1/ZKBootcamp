/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Verifier,
  VerifierInterface,
} from "../../../contracts/ZKVote/Verifier";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256[2]",
        name: "a",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[2][2]",
        name: "b",
        type: "uint256[2][2]",
      },
      {
        internalType: "uint256[2]",
        name: "c",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[2]",
        name: "input",
        type: "uint256[2]",
      },
    ],
    name: "verifyProof",
    outputs: [
      {
        internalType: "bool",
        name: "r",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610f5b908161001c8239f35b600080fdfe604060808152600436101561001357600080fd5b6000803560e01c63f5c9d69e1461002957600080fd5b346100be576101403660031901126100be576100443661015c565b9036606312156100be576100566100d7565b908160c4913683116100be57506044905b8282106100a5576100a18661009087876100803661019e565b9061008a366101dc565b92610424565b905190151581529081906020820190565b0390f35b602086916100b3368561021c565b815201910190610067565b80fd5b634e487b7160e01b600052604160045260246000fd5b604051906040820182811067ffffffffffffffff8211176100f757604052565b6100c1565b604051906060820182811067ffffffffffffffff8211176100f757604052565b604051906080820182811067ffffffffffffffff8211176100f757604052565b6040519060a0820182811067ffffffffffffffff8211176100f757604052565b80602312156101995761016d6100d7565b90816044918211610199576004905b8282106101895750505090565b813581526020918201910161017c565b600080fd5b8060e31215610199576101af6100d7565b90816101049182116101995760c4905b8282106101cc5750505090565b81358152602091820191016101bf565b806101231215610199576101ee6100d7565b908161014491821161019957610104905b82821061020c5750505090565b81358152602091820191016101ff565b9080601f83011215610199576102306100d7565b80926040810192831161019957905b82821061024c5750505090565b813581526020918201910161023f565b604051906020820182811067ffffffffffffffff8211176100f7576040526020368337565b6102896100d7565b906102926100d7565b604036823782526102a16100d7565b60403682376020830152565b604051906060820182811067ffffffffffffffff8211176100f757604052816102d46100d7565b600081526000602082015281526102e9610281565b602082015260406102f86100d7565b9160008352600060208401520152565b634e487b7160e01b600052603260045260246000fd5b90600281101561032f5760051b0190565b610308565b67ffffffffffffffff81116100f75760051b60200190565b6103546100fc565b60028152906040366020840137565b9061036d82610334565b60405190601f1990601f018116820167ffffffffffffffff8111838210176100f75760405283825261039f8294610334565b0190602036910137565b634e487b7160e01b600052601160045260246000fd5b60001981146103ce5760010190565b6103a9565b80511561032f5760200190565b80516001101561032f5760400190565b80516002101561032f5760600190565b80516003101561032f5760800190565b805182101561032f5760209160051b010190565b929190926104306102ad565b9381516020809301516104416100d7565b9182528382015285526104526100d7565b908051518252610463815160200190565b5183830152610482836104746100d7565b920180515183525160200190565b518382015261048f6100d7565b9182528282015281850152808251920151906104a96100d7565b92835282015260408301526104bc61034c565b9060005b600281106104e2575050906104d4916105d9565b6104dd57600190565b600090565b806104f0610501928461031e565b516104fb8286610410565b526103bf565b6104c0565b90600182018092116103ce57565b90600282018092116103ce57565b90600382018092116103ce57565b90600482018092116103ce57565b90600582018092116103ce57565b1561055357565b60405162461bcd60e51b81526020600482015260126024820152711d995c9a599a595c8b5898590b5a5b9c1d5d60721b6044820152606490fd5b1561059457565b60405162461bcd60e51b815260206004820152601f60248201527f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c64006044820152606490fd5b9190916105e4610be4565b916105ef8251610506565b9061060160808501928351511461054c565b6106096100d7565b6000815260006020820152946000955b84518710156106995761068d6106939161065e7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016106578b8a610410565b511061058d565b610687610675875161066f8c610506565b90610410565b516106808b8a610410565b51906107da565b90610782565b966103bf565b95610619565b6106eb959296506106e794506106b36106ba9294516103d3565b5190610782565b916106c581516106f9565b92602082015183516020850151916060604080880151960151960151966108a3565b1590565b6106f457600090565b600190565b600060206107056100d7565b828152015280511580610776575b61075f5760208151917f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4791829101510681039081116103ce576107546100d7565b918252602082015290565b506107686100d7565b600081526000602082015290565b50602081015115610713565b60609092919260c06107926100d7565b91600083526000602084015260208396816107ab61011c565b936080368637805185520151828401528051604084015201518482015260066107cf195a01fa156107d857565bfe5b60609092919260806107ea6100d7565b916000835260006020840152829560206108026100fc565b92863685378051845201516020830152604082015260076107cf195a01fa156107d857565b61082f61013c565b6004815290600082815b6080811061084657505050565b6020906108516100d7565b848152828581830152828501015201610839565b61086d61011c565b6003815290600082815b6060811061088457505050565b60209061088f6100d7565b848152828581830152828501015201610877565b979693949291956108b2610827565b956108bb61013c565b976004895260005b608081106109795750610976999a6108da896103d3565b526108e4886103d3565b506108ee886103e0565b526108f8876103e0565b50610902876103f0565b5261090c866103f0565b5061091686610400565b5261092085610400565b5061092a866103d3565b52610934856103d3565b5061093e856103e0565b52610948846103e0565b50610952846103f0565b5261095c836103f0565b5061096683610400565b5261097082610400565b50610a2f565b90565b602090610984610281565b82828d010152016108c3565b1561099757565b60405162461bcd60e51b81526020600482015260166024820152751c185a5c9a5b99cb5b195b99dd1a1ccb59985a5b195960521b6044820152606490fd5b906006820291808304600614901517156103ce57565b156109f257565b60405162461bcd60e51b81526020600482015260156024820152741c185a5c9a5b99cb5bdc18dbd9194b59985a5b1959605a1b6044820152606490fd5b610a3c8151835114610990565b8051610a47816109d5565b92610a5184610363565b9260005b838110610a9357505050506020918291610a6d61025c565b93849260051b910160086107cf195a01fa80156107d857610a8d906109eb565b51151590565b80610aa1610b7d9284610410565b5151610ab5610aaf836109d5565b88610410565b52610b68602080610ac68487610410565b510151610ae3610add610ad8866109d5565b610506565b8a610410565b52610aee8387610410565b515151610b05610add610b00866109d5565b610514565b52610b1b610b138488610410565b515160200190565b51610b30610add610b2b866109d5565b610522565b5280610b3c8488610410565b51015151610b54610add610b4f866109d5565b610530565b52610b5f8387610410565b51015160200190565b516104fb610aaf610b78846109d5565b61053e565b610a55565b6040519060a0820182811067ffffffffffffffff8211176100f7576040526060608083610bad6100d7565b60008152600060208201528152610bc2610281565b6020820152610bcf610281565b6040820152610bdc610281565b838201520152565b610bec610b82565b90610f22610bf86100d7565b7f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e281526020907f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d1926828201528452610c4d6100d7565b7f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c81527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab82820152610c9d6100d7565b7f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a781527f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec883820152610ced6100d7565b9182528282015281850152610d006100d7565b7f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2908181527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed8084830152610d536100d7565b907f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b928383527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa928387820152610da86100d7565b918252868201526040890152610dbc6100d7565b93845284840152610dcb6100d7565b91825283820152610dda6100d7565b918252828201526060850152610dee610865565b60808501908152610e5a610e006100d7565b7f020163e70c56f84f120db0a5c8fdb675a5233d4474d7b7d5ea96b2e3c32d16fe81527f1e732adbfb31f1fd6dea615e4304ac3372bc61d274a353bd34318f3f9d75735d84820152825190610e54826103d3565b526103d3565b50610ec0610e666100d7565b7f20bd1d187556a6d75fbb47ee23481ee36d1e8f81bf10043e5bffc1cd8536e4c281527f0266d8972ad53bba47b7f1337379b3d03434bc442a49cbd9b910f44c7dd6f8d584820152825190610eba826103e0565b526103e0565b507f1cbf01b537141584b3b4775016a4653f566ec617331e2ad44c10657ec8f91d97610eea6100d7565b927f09bf9264ae6f2136a12436bc78419bf4428fb9516943a3dc8a298fe798d26e6884528301525190610f1c826103f0565b526103f0565b5056fea26469706673582212200ae396e0bb1d978de986448ee53447902182d14b8de9a435bdf59178f73946ae64736f6c63430008140033";

type VerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Verifier__factory extends ContractFactory {
  constructor(...args: VerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Verifier> {
    return super.deploy(overrides || {}) as Promise<Verifier>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Verifier {
    return super.attach(address) as Verifier;
  }
  override connect(signer: Signer): Verifier__factory {
    return super.connect(signer) as Verifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VerifierInterface {
    return new utils.Interface(_abi) as VerifierInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Verifier {
    return new Contract(address, _abi, signerOrProvider) as Verifier;
  }
}
