/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type MetadataStruct = {
  protocol: PromiseOrValue<BigNumberish>;
  pointer: PromiseOrValue<string>;
};

export type MetadataStructOutput = [BigNumber, string] & {
  protocol: BigNumber;
  pointer: string;
};

export declare namespace IRegistry {
  export type ProfileStruct = {
    id: PromiseOrValue<BytesLike>;
    nonce: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
    metadata: MetadataStruct;
    owner: PromiseOrValue<string>;
    anchor: PromiseOrValue<string>;
  };

  export type ProfileStructOutput = [
    string,
    BigNumber,
    string,
    MetadataStructOutput,
    string,
    string
  ] & {
    id: string;
    nonce: BigNumber;
    name: string;
    metadata: MetadataStructOutput;
    owner: string;
    anchor: string;
  };
}

export interface IRegistryInterface extends utils.Interface {
  functions: {
    "acceptProfileOwnership(bytes32)": FunctionFragment;
    "addMembers(bytes32,address[])": FunctionFragment;
    "createProfile(uint256,string,(uint256,string),address,address[])": FunctionFragment;
    "getProfileByAnchor(address)": FunctionFragment;
    "getProfileById(bytes32)": FunctionFragment;
    "isMemberOfProfile(bytes32,address)": FunctionFragment;
    "isOwnerOfProfile(bytes32,address)": FunctionFragment;
    "isOwnerOrMemberOfProfile(bytes32,address)": FunctionFragment;
    "recoverFunds(address,address)": FunctionFragment;
    "removeMembers(bytes32,address[])": FunctionFragment;
    "updateProfileMetadata(bytes32,(uint256,string))": FunctionFragment;
    "updateProfileName(bytes32,string)": FunctionFragment;
    "updateProfilePendingOwner(bytes32,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptProfileOwnership"
      | "addMembers"
      | "createProfile"
      | "getProfileByAnchor"
      | "getProfileById"
      | "isMemberOfProfile"
      | "isOwnerOfProfile"
      | "isOwnerOrMemberOfProfile"
      | "recoverFunds"
      | "removeMembers"
      | "updateProfileMetadata"
      | "updateProfileName"
      | "updateProfilePendingOwner"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptProfileOwnership",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "addMembers",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createProfile",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      MetadataStruct,
      PromiseOrValue<string>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getProfileByAnchor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProfileById",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isMemberOfProfile",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOwnerOfProfile",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOwnerOrMemberOfProfile",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverFunds",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMembers",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProfileMetadata",
    values: [PromiseOrValue<BytesLike>, MetadataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProfileName",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProfilePendingOwner",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptProfileOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addMembers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProfileByAnchor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProfileById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMemberOfProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOwnerOfProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOwnerOrMemberOfProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProfileMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProfileName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProfilePendingOwner",
    data: BytesLike
  ): Result;

  events: {
    "ProfileCreated(bytes32,uint256,string,tuple,address,address)": EventFragment;
    "ProfileMetadataUpdated(bytes32,tuple)": EventFragment;
    "ProfileNameUpdated(bytes32,string,address)": EventFragment;
    "ProfileOwnerUpdated(bytes32,address)": EventFragment;
    "ProfilePendingOwnerUpdated(bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProfileCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProfileMetadataUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProfileNameUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProfileOwnerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProfilePendingOwnerUpdated"): EventFragment;
}

export interface ProfileCreatedEventObject {
  profileId: string;
  nonce: BigNumber;
  name: string;
  metadata: MetadataStructOutput;
  owner: string;
  anchor: string;
}
export type ProfileCreatedEvent = TypedEvent<
  [string, BigNumber, string, MetadataStructOutput, string, string],
  ProfileCreatedEventObject
>;

export type ProfileCreatedEventFilter = TypedEventFilter<ProfileCreatedEvent>;

export interface ProfileMetadataUpdatedEventObject {
  profileId: string;
  metadata: MetadataStructOutput;
}
export type ProfileMetadataUpdatedEvent = TypedEvent<
  [string, MetadataStructOutput],
  ProfileMetadataUpdatedEventObject
>;

export type ProfileMetadataUpdatedEventFilter =
  TypedEventFilter<ProfileMetadataUpdatedEvent>;

export interface ProfileNameUpdatedEventObject {
  profileId: string;
  name: string;
  anchor: string;
}
export type ProfileNameUpdatedEvent = TypedEvent<
  [string, string, string],
  ProfileNameUpdatedEventObject
>;

export type ProfileNameUpdatedEventFilter =
  TypedEventFilter<ProfileNameUpdatedEvent>;

export interface ProfileOwnerUpdatedEventObject {
  profileId: string;
  owner: string;
}
export type ProfileOwnerUpdatedEvent = TypedEvent<
  [string, string],
  ProfileOwnerUpdatedEventObject
>;

export type ProfileOwnerUpdatedEventFilter =
  TypedEventFilter<ProfileOwnerUpdatedEvent>;

export interface ProfilePendingOwnerUpdatedEventObject {
  profileId: string;
  pendingOwner: string;
}
export type ProfilePendingOwnerUpdatedEvent = TypedEvent<
  [string, string],
  ProfilePendingOwnerUpdatedEventObject
>;

export type ProfilePendingOwnerUpdatedEventFilter =
  TypedEventFilter<ProfilePendingOwnerUpdatedEvent>;

export interface IRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptProfileOwnership(
      _profileId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addMembers(
      _profileId: PromiseOrValue<BytesLike>,
      _members: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createProfile(
      _nonce: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _metadata: MetadataStruct,
      _owner: PromiseOrValue<string>,
      _members: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getProfileByAnchor(
      _anchor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [IRegistry.ProfileStructOutput] & {
        profile: IRegistry.ProfileStructOutput;
      }
    >;

    getProfileById(
      _profileId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [IRegistry.ProfileStructOutput] & {
        profile: IRegistry.ProfileStructOutput;
      }
    >;

    isMemberOfProfile(
      _profileId: PromiseOrValue<BytesLike>,
      _member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isMemberOfProfile: boolean }>;

    isOwnerOfProfile(
      _profileId: PromiseOrValue<BytesLike>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isOwnerOfProfile: boolean }>;

    isOwnerOrMemberOfProfile(
      _profileId: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isOwnerOrMemberOfProfile: boolean }>;

    recoverFunds(
      _token: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeMembers(
      _profileId: PromiseOrValue<BytesLike>,
      _members: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateProfileMetadata(
      _profileId: PromiseOrValue<BytesLike>,
      _metadata: MetadataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateProfileName(
      _profileId: PromiseOrValue<BytesLike>,
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateProfilePendingOwner(
      _profileId: PromiseOrValue<BytesLike>,
      _pendingOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptProfileOwnership(
    _profileId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addMembers(
    _profileId: PromiseOrValue<BytesLike>,
    _members: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createProfile(
    _nonce: PromiseOrValue<BigNumberish>,
    _name: PromiseOrValue<string>,
    _metadata: MetadataStruct,
    _owner: PromiseOrValue<string>,
    _members: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getProfileByAnchor(
    _anchor: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IRegistry.ProfileStructOutput>;

  getProfileById(
    _profileId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IRegistry.ProfileStructOutput>;

  isMemberOfProfile(
    _profileId: PromiseOrValue<BytesLike>,
    _member: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOwnerOfProfile(
    _profileId: PromiseOrValue<BytesLike>,
    _owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOwnerOrMemberOfProfile(
    _profileId: PromiseOrValue<BytesLike>,
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  recoverFunds(
    _token: PromiseOrValue<string>,
    _recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeMembers(
    _profileId: PromiseOrValue<BytesLike>,
    _members: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateProfileMetadata(
    _profileId: PromiseOrValue<BytesLike>,
    _metadata: MetadataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateProfileName(
    _profileId: PromiseOrValue<BytesLike>,
    _name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateProfilePendingOwner(
    _profileId: PromiseOrValue<BytesLike>,
    _pendingOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptProfileOwnership(
      _profileId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    addMembers(
      _profileId: PromiseOrValue<BytesLike>,
      _members: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    createProfile(
      _nonce: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _metadata: MetadataStruct,
      _owner: PromiseOrValue<string>,
      _members: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<string>;

    getProfileByAnchor(
      _anchor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IRegistry.ProfileStructOutput>;

    getProfileById(
      _profileId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IRegistry.ProfileStructOutput>;

    isMemberOfProfile(
      _profileId: PromiseOrValue<BytesLike>,
      _member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOwnerOfProfile(
      _profileId: PromiseOrValue<BytesLike>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOwnerOrMemberOfProfile(
      _profileId: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    recoverFunds(
      _token: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeMembers(
      _profileId: PromiseOrValue<BytesLike>,
      _members: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateProfileMetadata(
      _profileId: PromiseOrValue<BytesLike>,
      _metadata: MetadataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    updateProfileName(
      _profileId: PromiseOrValue<BytesLike>,
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    updateProfilePendingOwner(
      _profileId: PromiseOrValue<BytesLike>,
      _pendingOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ProfileCreated(bytes32,uint256,string,tuple,address,address)"(
      profileId?: PromiseOrValue<BytesLike> | null,
      nonce?: null,
      name?: null,
      metadata?: null,
      owner?: null,
      anchor?: null
    ): ProfileCreatedEventFilter;
    ProfileCreated(
      profileId?: PromiseOrValue<BytesLike> | null,
      nonce?: null,
      name?: null,
      metadata?: null,
      owner?: null,
      anchor?: null
    ): ProfileCreatedEventFilter;

    "ProfileMetadataUpdated(bytes32,tuple)"(
      profileId?: PromiseOrValue<BytesLike> | null,
      metadata?: null
    ): ProfileMetadataUpdatedEventFilter;
    ProfileMetadataUpdated(
      profileId?: PromiseOrValue<BytesLike> | null,
      metadata?: null
    ): ProfileMetadataUpdatedEventFilter;

    "ProfileNameUpdated(bytes32,string,address)"(
      profileId?: PromiseOrValue<BytesLike> | null,
      name?: null,
      anchor?: null
    ): ProfileNameUpdatedEventFilter;
    ProfileNameUpdated(
      profileId?: PromiseOrValue<BytesLike> | null,
      name?: null,
      anchor?: null
    ): ProfileNameUpdatedEventFilter;

    "ProfileOwnerUpdated(bytes32,address)"(
      profileId?: PromiseOrValue<BytesLike> | null,
      owner?: null
    ): ProfileOwnerUpdatedEventFilter;
    ProfileOwnerUpdated(
      profileId?: PromiseOrValue<BytesLike> | null,
      owner?: null
    ): ProfileOwnerUpdatedEventFilter;

    "ProfilePendingOwnerUpdated(bytes32,address)"(
      profileId?: PromiseOrValue<BytesLike> | null,
      pendingOwner?: null
    ): ProfilePendingOwnerUpdatedEventFilter;
    ProfilePendingOwnerUpdated(
      profileId?: PromiseOrValue<BytesLike> | null,
      pendingOwner?: null
    ): ProfilePendingOwnerUpdatedEventFilter;
  };

  estimateGas: {
    acceptProfileOwnership(
      _profileId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addMembers(
      _profileId: PromiseOrValue<BytesLike>,
      _members: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createProfile(
      _nonce: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _metadata: MetadataStruct,
      _owner: PromiseOrValue<string>,
      _members: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getProfileByAnchor(
      _anchor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProfileById(
      _profileId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMemberOfProfile(
      _profileId: PromiseOrValue<BytesLike>,
      _member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwnerOfProfile(
      _profileId: PromiseOrValue<BytesLike>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwnerOrMemberOfProfile(
      _profileId: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recoverFunds(
      _token: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeMembers(
      _profileId: PromiseOrValue<BytesLike>,
      _members: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateProfileMetadata(
      _profileId: PromiseOrValue<BytesLike>,
      _metadata: MetadataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateProfileName(
      _profileId: PromiseOrValue<BytesLike>,
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateProfilePendingOwner(
      _profileId: PromiseOrValue<BytesLike>,
      _pendingOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptProfileOwnership(
      _profileId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addMembers(
      _profileId: PromiseOrValue<BytesLike>,
      _members: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createProfile(
      _nonce: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _metadata: MetadataStruct,
      _owner: PromiseOrValue<string>,
      _members: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getProfileByAnchor(
      _anchor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProfileById(
      _profileId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMemberOfProfile(
      _profileId: PromiseOrValue<BytesLike>,
      _member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwnerOfProfile(
      _profileId: PromiseOrValue<BytesLike>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwnerOrMemberOfProfile(
      _profileId: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recoverFunds(
      _token: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeMembers(
      _profileId: PromiseOrValue<BytesLike>,
      _members: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateProfileMetadata(
      _profileId: PromiseOrValue<BytesLike>,
      _metadata: MetadataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateProfileName(
      _profileId: PromiseOrValue<BytesLike>,
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateProfilePendingOwner(
      _profileId: PromiseOrValue<BytesLike>,
      _pendingOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
