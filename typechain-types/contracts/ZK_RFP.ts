/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type MetadataStruct = {
  protocol: PromiseOrValue<BigNumberish>;
  pointer: PromiseOrValue<string>;
};

export type MetadataStructOutput = [BigNumber, string] & {
  protocol: BigNumber;
  pointer: string;
};

export declare namespace ZK_RFP {
  export type InitializeParamsStruct = {
    maxBid: PromiseOrValue<BigNumberish>;
    useRegistryAnchor: PromiseOrValue<boolean>;
    metadataRequired: PromiseOrValue<boolean>;
  };

  export type InitializeParamsStructOutput = [BigNumber, boolean, boolean] & {
    maxBid: BigNumber;
    useRegistryAnchor: boolean;
    metadataRequired: boolean;
  };

  export type InitializeParamsCommitteeStruct = {
    voteThreshold: PromiseOrValue<BigNumberish>;
    params: ZK_RFP.InitializeParamsStruct;
  };

  export type InitializeParamsCommitteeStructOutput = [
    BigNumber,
    ZK_RFP.InitializeParamsStructOutput,
  ] & { voteThreshold: BigNumber; params: ZK_RFP.InitializeParamsStructOutput };

  export type PoolStruct = {
    registrationEnds: PromiseOrValue<BigNumberish>;
    votingEnds: PromiseOrValue<BigNumberish>;
    threshold: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    metadata: MetadataStruct;
    privateVoteContract: PromiseOrValue<string>;
  };

  export type PoolStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    MetadataStructOutput,
    string,
  ] & {
    registrationEnds: BigNumber;
    votingEnds: BigNumber;
    threshold: BigNumber;
    amount: BigNumber;
    metadata: MetadataStructOutput;
    privateVoteContract: string;
  };

  export type RecipientStruct = {
    recipientAddress: PromiseOrValue<string>;
    proposalBid: PromiseOrValue<BigNumberish>;
    recipientStatus: PromiseOrValue<BigNumberish>;
    metadata: MetadataStruct;
  };

  export type RecipientStructOutput = [
    string,
    BigNumber,
    number,
    MetadataStructOutput,
  ] & {
    recipientAddress: string;
    proposalBid: BigNumber;
    recipientStatus: number;
    metadata: MetadataStructOutput;
  };
}

export declare namespace IRegistry {
  export type ProfileStruct = {
    id: PromiseOrValue<BytesLike>;
    nonce: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
    metadata: MetadataStruct;
    owner: PromiseOrValue<string>;
    anchor: PromiseOrValue<string>;
  };

  export type ProfileStructOutput = [
    string,
    BigNumber,
    string,
    MetadataStructOutput,
    string,
    string,
  ] & {
    id: string;
    nonce: BigNumber;
    name: string;
    metadata: MetadataStructOutput;
    owner: string;
    anchor: string;
  };
}

export declare namespace IStrategy {
  export type MilestoneStruct = {
    amountPercentage: PromiseOrValue<BigNumberish>;
    metadata: MetadataStruct;
    milestoneStatus: PromiseOrValue<BigNumberish>;
  };

  export type MilestoneStructOutput = [
    BigNumber,
    MetadataStructOutput,
    number,
  ] & {
    amountPercentage: BigNumber;
    metadata: MetadataStructOutput;
    milestoneStatus: number;
  };
}

export interface ZK_RFPInterface extends utils.Interface {
  functions: {
    "Allo()": FunctionFragment;
    "AllocateToRecipient(uint256,address,uint256,uint256,uint256[2],uint256[2][2],uint256[2])": FunctionFragment;
    "Registry()": FunctionFragment;
    "_nonce()": FunctionFragment;
    "commitment(uint256,uint256,uint256)": FunctionFragment;
    "createPool((uint256,(uint256,bool,bool)),(uint256,string),address[],uint256,uint256)": FunctionFragment;
    "distributeCurrentMilestone(uint256)": FunctionFragment;
    "getPoolData(uint256)": FunctionFragment;
    "getPoolRecipients(uint256)": FunctionFragment;
    "getProfileData(bytes32)": FunctionFragment;
    "getTime()": FunctionFragment;
    "increaseMaxBid(uint256,uint256)": FunctionFragment;
    "poolIdInfo(uint256)": FunctionFragment;
    "poolIds(uint256)": FunctionFragment;
    "poolWinner(uint256)": FunctionFragment;
    "profileId()": FunctionFragment;
    "recipientInfo(bytes32)": FunctionFragment;
    "registerRecipient(uint256,uint256,string,(uint256,string),address[])": FunctionFragment;
    "registerValidator(uint256,address)": FunctionFragment;
    "rejectMilestone(uint256,uint256)": FunctionFragment;
    "setMilestonesToStrategy(uint256,(uint256,(uint256,string),uint8)[])": FunctionFragment;
    "setPoolWinner(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "Allo"
      | "AllocateToRecipient"
      | "Registry"
      | "_nonce"
      | "commitment"
      | "createPool"
      | "distributeCurrentMilestone"
      | "getPoolData"
      | "getPoolRecipients"
      | "getProfileData"
      | "getTime"
      | "increaseMaxBid"
      | "poolIdInfo"
      | "poolIds"
      | "poolWinner"
      | "profileId"
      | "recipientInfo"
      | "registerRecipient"
      | "registerValidator"
      | "rejectMilestone"
      | "setMilestonesToStrategy"
      | "setPoolWinner",
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "Allo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "AllocateToRecipient",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      [
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      ],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    ],
  ): string;
  encodeFunctionData(functionFragment: "Registry", values?: undefined): string;
  encodeFunctionData(functionFragment: "_nonce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "commitment",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "createPool",
    values: [
      ZK_RFP.InitializeParamsCommitteeStruct,
      MetadataStruct,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "distributeCurrentMilestone",
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolData",
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolRecipients",
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: "getProfileData",
    values: [PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: "getTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseMaxBid",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: "poolIdInfo",
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: "poolIds",
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: "poolWinner",
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: "profileId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recipientInfo",
    values: [PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(
    functionFragment: "registerRecipient",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      MetadataStruct,
      PromiseOrValue<string>[],
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "registerValidator",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: "rejectMilestone",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: "setMilestonesToStrategy",
    values: [PromiseOrValue<BigNumberish>, IStrategy.MilestoneStruct[]],
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolWinner",
    values: [PromiseOrValue<BigNumberish>],
  ): string;

  decodeFunctionResult(functionFragment: "Allo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "AllocateToRecipient",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "Registry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "commitment", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeCurrentMilestone",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolData",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolRecipients",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProfileData",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "getTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseMaxBid",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "poolIdInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolIds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolWinner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "profileId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recipientInfo",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerRecipient",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerValidator",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectMilestone",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMilestonesToStrategy",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolWinner",
    data: BytesLike,
  ): Result;

  events: {};
}

export interface ZK_RFP extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ZK_RFPInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    Allo(overrides?: CallOverrides): Promise<[string]>;

    AllocateToRecipient(
      _poolId: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _nullifier: PromiseOrValue<BigNumberish>,
      _root: PromiseOrValue<BigNumberish>,
      _proof_a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _proof_b: [
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      ],
      _proof_c: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    Registry(overrides?: CallOverrides): Promise<[string]>;

    _nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    commitment(
      _poolId: PromiseOrValue<BigNumberish>,
      _uniqueHash: PromiseOrValue<BigNumberish>,
      _commitment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    createPool(
      initializeParams: ZK_RFP.InitializeParamsCommitteeStruct,
      _metadata: MetadataStruct,
      _managers: PromiseOrValue<string>[],
      _registrationDuration: PromiseOrValue<BigNumberish>,
      _votingDuration: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    distributeCurrentMilestone(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getPoolData(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[ZK_RFP.PoolStructOutput] & { pool: ZK_RFP.PoolStructOutput }>;

    getPoolRecipients(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[ZK_RFP.RecipientStructOutput[]]>;

    getProfileData(
      _profileId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<
      [IRegistry.ProfileStructOutput] & {
        profile: IRegistry.ProfileStructOutput;
      }
    >;

    getTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseMaxBid(
      _poolId: PromiseOrValue<BigNumberish>,
      _maxBid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    poolIdInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        MetadataStructOutput,
        string,
      ] & {
        registrationEnds: BigNumber;
        votingEnds: BigNumber;
        threshold: BigNumber;
        amount: BigNumber;
        metadata: MetadataStructOutput;
        privateVoteContract: string;
      }
    >;

    poolIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    poolWinner(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, number, MetadataStructOutput] & {
        recipientAddress: string;
        proposalBid: BigNumber;
        recipientStatus: number;
        metadata: MetadataStructOutput;
      }
    >;

    profileId(overrides?: CallOverrides): Promise<[string]>;

    recipientInfo(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, number, MetadataStructOutput] & {
        recipientAddress: string;
        proposalBid: BigNumber;
        recipientStatus: number;
        metadata: MetadataStructOutput;
      }
    >;

    registerRecipient(
      _poolId: PromiseOrValue<BigNumberish>,
      _proposalBid: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _metadata: MetadataStruct,
      _profileMembers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    registerValidator(
      _poolId: PromiseOrValue<BigNumberish>,
      _validator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    rejectMilestone(
      _poolId: PromiseOrValue<BigNumberish>,
      _milestoneId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMilestonesToStrategy(
      _poolId: PromiseOrValue<BigNumberish>,
      _milestones: IStrategy.MilestoneStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setPoolWinner(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  Allo(overrides?: CallOverrides): Promise<string>;

  AllocateToRecipient(
    _poolId: PromiseOrValue<BigNumberish>,
    _recipient: PromiseOrValue<string>,
    _nullifier: PromiseOrValue<BigNumberish>,
    _root: PromiseOrValue<BigNumberish>,
    _proof_a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    _proof_b: [
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    ],
    _proof_c: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  Registry(overrides?: CallOverrides): Promise<string>;

  _nonce(overrides?: CallOverrides): Promise<BigNumber>;

  commitment(
    _poolId: PromiseOrValue<BigNumberish>,
    _uniqueHash: PromiseOrValue<BigNumberish>,
    _commitment: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  createPool(
    initializeParams: ZK_RFP.InitializeParamsCommitteeStruct,
    _metadata: MetadataStruct,
    _managers: PromiseOrValue<string>[],
    _registrationDuration: PromiseOrValue<BigNumberish>,
    _votingDuration: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  distributeCurrentMilestone(
    _poolId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getPoolData(
    _poolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<ZK_RFP.PoolStructOutput>;

  getPoolRecipients(
    _poolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<ZK_RFP.RecipientStructOutput[]>;

  getProfileData(
    _profileId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<IRegistry.ProfileStructOutput>;

  getTime(overrides?: CallOverrides): Promise<BigNumber>;

  increaseMaxBid(
    _poolId: PromiseOrValue<BigNumberish>,
    _maxBid: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  poolIdInfo(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      MetadataStructOutput,
      string,
    ] & {
      registrationEnds: BigNumber;
      votingEnds: BigNumber;
      threshold: BigNumber;
      amount: BigNumber;
      metadata: MetadataStructOutput;
      privateVoteContract: string;
    }
  >;

  poolIds(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  poolWinner(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [string, BigNumber, number, MetadataStructOutput] & {
      recipientAddress: string;
      proposalBid: BigNumber;
      recipientStatus: number;
      metadata: MetadataStructOutput;
    }
  >;

  profileId(overrides?: CallOverrides): Promise<string>;

  recipientInfo(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<
    [string, BigNumber, number, MetadataStructOutput] & {
      recipientAddress: string;
      proposalBid: BigNumber;
      recipientStatus: number;
      metadata: MetadataStructOutput;
    }
  >;

  registerRecipient(
    _poolId: PromiseOrValue<BigNumberish>,
    _proposalBid: PromiseOrValue<BigNumberish>,
    _name: PromiseOrValue<string>,
    _metadata: MetadataStruct,
    _profileMembers: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  registerValidator(
    _poolId: PromiseOrValue<BigNumberish>,
    _validator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  rejectMilestone(
    _poolId: PromiseOrValue<BigNumberish>,
    _milestoneId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMilestonesToStrategy(
    _poolId: PromiseOrValue<BigNumberish>,
    _milestones: IStrategy.MilestoneStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setPoolWinner(
    _poolId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    Allo(overrides?: CallOverrides): Promise<string>;

    AllocateToRecipient(
      _poolId: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _nullifier: PromiseOrValue<BigNumberish>,
      _root: PromiseOrValue<BigNumberish>,
      _proof_a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _proof_b: [
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      ],
      _proof_c: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: CallOverrides,
    ): Promise<void>;

    Registry(overrides?: CallOverrides): Promise<string>;

    _nonce(overrides?: CallOverrides): Promise<BigNumber>;

    commitment(
      _poolId: PromiseOrValue<BigNumberish>,
      _uniqueHash: PromiseOrValue<BigNumberish>,
      _commitment: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    createPool(
      initializeParams: ZK_RFP.InitializeParamsCommitteeStruct,
      _metadata: MetadataStruct,
      _managers: PromiseOrValue<string>[],
      _registrationDuration: PromiseOrValue<BigNumberish>,
      _votingDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    distributeCurrentMilestone(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    getPoolData(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<ZK_RFP.PoolStructOutput>;

    getPoolRecipients(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<ZK_RFP.RecipientStructOutput[]>;

    getProfileData(
      _profileId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<IRegistry.ProfileStructOutput>;

    getTime(overrides?: CallOverrides): Promise<BigNumber>;

    increaseMaxBid(
      _poolId: PromiseOrValue<BigNumberish>,
      _maxBid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    poolIdInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        MetadataStructOutput,
        string,
      ] & {
        registrationEnds: BigNumber;
        votingEnds: BigNumber;
        threshold: BigNumber;
        amount: BigNumber;
        metadata: MetadataStructOutput;
        privateVoteContract: string;
      }
    >;

    poolIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    poolWinner(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, number, MetadataStructOutput] & {
        recipientAddress: string;
        proposalBid: BigNumber;
        recipientStatus: number;
        metadata: MetadataStructOutput;
      }
    >;

    profileId(overrides?: CallOverrides): Promise<string>;

    recipientInfo(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, number, MetadataStructOutput] & {
        recipientAddress: string;
        proposalBid: BigNumber;
        recipientStatus: number;
        metadata: MetadataStructOutput;
      }
    >;

    registerRecipient(
      _poolId: PromiseOrValue<BigNumberish>,
      _proposalBid: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _metadata: MetadataStruct,
      _profileMembers: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    registerValidator(
      _poolId: PromiseOrValue<BigNumberish>,
      _validator: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    rejectMilestone(
      _poolId: PromiseOrValue<BigNumberish>,
      _milestoneId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setMilestonesToStrategy(
      _poolId: PromiseOrValue<BigNumberish>,
      _milestones: IStrategy.MilestoneStruct[],
      overrides?: CallOverrides,
    ): Promise<void>;

    setPoolWinner(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    Allo(overrides?: CallOverrides): Promise<BigNumber>;

    AllocateToRecipient(
      _poolId: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _nullifier: PromiseOrValue<BigNumberish>,
      _root: PromiseOrValue<BigNumberish>,
      _proof_a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _proof_b: [
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      ],
      _proof_c: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    Registry(overrides?: CallOverrides): Promise<BigNumber>;

    _nonce(overrides?: CallOverrides): Promise<BigNumber>;

    commitment(
      _poolId: PromiseOrValue<BigNumberish>,
      _uniqueHash: PromiseOrValue<BigNumberish>,
      _commitment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    createPool(
      initializeParams: ZK_RFP.InitializeParamsCommitteeStruct,
      _metadata: MetadataStruct,
      _managers: PromiseOrValue<string>[],
      _registrationDuration: PromiseOrValue<BigNumberish>,
      _votingDuration: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    distributeCurrentMilestone(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getPoolData(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPoolRecipients(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getProfileData(
      _profileId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getTime(overrides?: CallOverrides): Promise<BigNumber>;

    increaseMaxBid(
      _poolId: PromiseOrValue<BigNumberish>,
      _maxBid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    poolIdInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    poolIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    poolWinner(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    profileId(overrides?: CallOverrides): Promise<BigNumber>;

    recipientInfo(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    registerRecipient(
      _poolId: PromiseOrValue<BigNumberish>,
      _proposalBid: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _metadata: MetadataStruct,
      _profileMembers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    registerValidator(
      _poolId: PromiseOrValue<BigNumberish>,
      _validator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    rejectMilestone(
      _poolId: PromiseOrValue<BigNumberish>,
      _milestoneId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMilestonesToStrategy(
      _poolId: PromiseOrValue<BigNumberish>,
      _milestones: IStrategy.MilestoneStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setPoolWinner(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    Allo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    AllocateToRecipient(
      _poolId: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      _nullifier: PromiseOrValue<BigNumberish>,
      _root: PromiseOrValue<BigNumberish>,
      _proof_a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _proof_b: [
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      ],
      _proof_c: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    Registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    commitment(
      _poolId: PromiseOrValue<BigNumberish>,
      _uniqueHash: PromiseOrValue<BigNumberish>,
      _commitment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    createPool(
      initializeParams: ZK_RFP.InitializeParamsCommitteeStruct,
      _metadata: MetadataStruct,
      _managers: PromiseOrValue<string>[],
      _registrationDuration: PromiseOrValue<BigNumberish>,
      _votingDuration: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    distributeCurrentMilestone(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getPoolData(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getPoolRecipients(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getProfileData(
      _profileId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseMaxBid(
      _poolId: PromiseOrValue<BigNumberish>,
      _maxBid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    poolIdInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    poolIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    poolWinner(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    profileId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recipientInfo(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    registerRecipient(
      _poolId: PromiseOrValue<BigNumberish>,
      _proposalBid: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _metadata: MetadataStruct,
      _profileMembers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    registerValidator(
      _poolId: PromiseOrValue<BigNumberish>,
      _validator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    rejectMilestone(
      _poolId: PromiseOrValue<BigNumberish>,
      _milestoneId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMilestonesToStrategy(
      _poolId: PromiseOrValue<BigNumberish>,
      _milestones: IStrategy.MilestoneStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setPoolWinner(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
