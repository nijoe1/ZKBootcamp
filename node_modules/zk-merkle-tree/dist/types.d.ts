import { BigNumberish } from "ethers";
type PromiseOrValue<T> = T | Promise<T>;
export function getVerifierWASM(): any;
export function generateCommitment(): Promise<{
    nullifier: string;
    secret: string;
    commitment: any;
    nullifierHash: any;
}>;
export function generateZeros(mimc: any, levels: number): any[];
export function calculateMerkleRootAndPath(mimc: any, levels: number, elements: any[], element?: any): {
    root: any;
    pathElements: any[];
    pathIndices: any[];
};
export function checkMerkleProof(mimc: any, levels: number, pathElements: any[], pathIndices: any[], element: any): any;
export function calculateMerkleRootAndPathFromEvents(mimc: any, address: any, provider: any, levels: number, element: any): Promise<{
    root: any;
    pathElements: any[];
    pathIndices: any[];
}>;
export function convertCallData(calldata: any): {
    a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
    b: [[PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>], [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]];
    c: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
    input: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
};
export function calculateMerkleRootAndZKProof(address: any, provider: any, levels: number, commitment: any, zkey: any): Promise<{
    nullifierHash: any;
    root: any;
    proof_a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
    proof_b: [[PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>], [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]];
    proof_c: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
}>;

//# sourceMappingURL=types.d.ts.map
